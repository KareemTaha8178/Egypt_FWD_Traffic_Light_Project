
Traffic_Project_FWD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000071e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  0000071e  00000792  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000007ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a7a  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a21  00000000  00000000  0000239a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ccf  00000000  00000000  00002dbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f0  00000000  00000000  00003a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007a1  00000000  00000000  00003c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000def  00000000  00000000  0000441d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000148  00000000  00000000  0000520c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e8       	ldi	r26, 0x88	; 136
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 38       	cpi	r26, 0x88	; 136
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ac 01 	call	0x358	; 0x358 <main>
  8a:	0c 94 8d 03 	jmp	0x71a	; 0x71a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <application_initialize>:
}



void application_initialize(void){
	gpio_port_direction_init(PORTC_INDEX, GPIO_INPUT_DIRECTION);
  92:	61 e0       	ldi	r22, 0x01	; 1
  94:	82 e0       	ldi	r24, 0x02	; 2
  96:	0e 94 7d 03 	call	0x6fa	; 0x6fa <gpio_port_direction_init>
	gpio_pin_direction_init(&pin_1);
  9a:	8f e6       	ldi	r24, 0x6F	; 111
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 a0 02 	call	0x540	; 0x540 <gpio_pin_direction_init>
	gpio_pin_direction_init(&pin_2);
  a2:	8e e6       	ldi	r24, 0x6E	; 110
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 a0 02 	call	0x540	; 0x540 <gpio_pin_direction_init>
	gpio_pin_direction_init(&pin_3);
  aa:	8d e6       	ldi	r24, 0x6D	; 109
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 a0 02 	call	0x540	; 0x540 <gpio_pin_direction_init>
	gpio_pin_direction_init(&pin_4);
  b2:	8c e6       	ldi	r24, 0x6C	; 108
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 a0 02 	call	0x540	; 0x540 <gpio_pin_direction_init>
	gpio_pin_direction_init(&pin_5);
  ba:	8b e6       	ldi	r24, 0x6B	; 107
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 a0 02 	call	0x540	; 0x540 <gpio_pin_direction_init>
	gpio_pin_direction_init(&pin_6);
  c2:	8a e6       	ldi	r24, 0x6A	; 106
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 a0 02 	call	0x540	; 0x540 <gpio_pin_direction_init>
	led_initialize(&led_1);
  ca:	89 e6       	ldi	r24, 0x69	; 105
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <led_initialize>
	led_initialize(&led_2);
  d2:	88 e6       	ldi	r24, 0x68	; 104
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <led_initialize>
	led_initialize(&led_3);
  da:	87 e6       	ldi	r24, 0x67	; 103
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <led_initialize>
	led_initialize(&led_4);
  e2:	86 e6       	ldi	r24, 0x66	; 102
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <led_initialize>
	led_initialize(&led_5);
  ea:	85 e6       	ldi	r24, 0x65	; 101
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <led_initialize>
	led_initialize(&led_6);
  f2:	84 e6       	ldi	r24, 0x64	; 100
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <led_initialize>
	button_initialize(&btn_1);
  fa:	81 e6       	ldi	r24, 0x61	; 97
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 ae 01 	call	0x35c	; 0x35c <button_initialize>
 102:	08 95       	ret

00000104 <app_Start>:


button_state_t button_1 = BUTTON_RELEASED;

void app_Start(){
	application_initialize();
 104:	0e 94 49 00 	call	0x92	; 0x92 <application_initialize>
	
	while (1)
	{
		
		int flag1 = 0, flag2 = 0, flag3 = 0;
		led_turn_on(&led_1);
 108:	89 e6       	ldi	r24, 0x69	; 105
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 23 02 	call	0x446	; 0x446 <led_turn_on>
		for(int i = 0; i < 5; i++){
 110:	e1 2c       	mov	r14, r1
 112:	f1 2c       	mov	r15, r1
 114:	35 c0       	rjmp	.+106    	; 0x180 <app_Start+0x7c>
			int flag_green = 0;
			for(int j = 0; j < 1000; j++){
				button_read_state(&btn_1, &button_1);
 116:	60 e6       	ldi	r22, 0x60	; 96
 118:	70 e0       	ldi	r23, 0x00	; 0
 11a:	81 e6       	ldi	r24, 0x61	; 97
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 b5 01 	call	0x36a	; 0x36a <button_read_state>
				if(button_1 == BUTTON_PRESSED) flag_green++;
 122:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 126:	81 11       	cpse	r24, r1
 128:	02 c0       	rjmp	.+4      	; 0x12e <app_Start+0x2a>
 12a:	0f 5f       	subi	r16, 0xFF	; 255
 12c:	1f 4f       	sbci	r17, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	89 ef       	ldi	r24, 0xF9	; 249
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <app_Start+0x2e>
 136:	00 c0       	rjmp	.+0      	; 0x138 <app_Start+0x34>
 138:	00 00       	nop
		
		int flag1 = 0, flag2 = 0, flag3 = 0;
		led_turn_on(&led_1);
		for(int i = 0; i < 5; i++){
			int flag_green = 0;
			for(int j = 0; j < 1000; j++){
 13a:	21 96       	adiw	r28, 0x01	; 1
 13c:	04 c0       	rjmp	.+8      	; 0x146 <app_Start+0x42>
 13e:	c0 e0       	ldi	r28, 0x00	; 0
 140:	d0 e0       	ldi	r29, 0x00	; 0
 142:	00 e0       	ldi	r16, 0x00	; 0
 144:	10 e0       	ldi	r17, 0x00	; 0
 146:	c8 3e       	cpi	r28, 0xE8	; 232
 148:	93 e0       	ldi	r25, 0x03	; 3
 14a:	d9 07       	cpc	r29, r25
 14c:	24 f3       	brlt	.-56     	; 0x116 <app_Start+0x12>
				button_read_state(&btn_1, &button_1);
				if(button_1 == BUTTON_PRESSED) flag_green++;
				_delay_ms(1);
			}
			if(flag_green > 0 && flag_green < 250 && flag1 == 0){
 14e:	01 50       	subi	r16, 0x01	; 1
 150:	11 09       	sbc	r17, r1
 152:	09 3f       	cpi	r16, 0xF9	; 249
 154:	11 05       	cpc	r17, r1
 156:	88 f4       	brcc	.+34     	; 0x17a <app_Start+0x76>
				led_turn_on(&led_6);
 158:	84 e6       	ldi	r24, 0x64	; 100
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 23 02 	call	0x446	; 0x446 <led_turn_on>
 160:	2f e9       	ldi	r18, 0x9F	; 159
 162:	86 e8       	ldi	r24, 0x86	; 134
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	21 50       	subi	r18, 0x01	; 1
 168:	80 40       	sbci	r24, 0x00	; 0
 16a:	90 40       	sbci	r25, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <app_Start+0x62>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <app_Start+0x6c>
 170:	00 00       	nop
				_delay_ms(500);
				flag1 = 1;
 172:	ee 24       	eor	r14, r14
 174:	e3 94       	inc	r14
 176:	f1 2c       	mov	r15, r1
				break;
 178:	09 c0       	rjmp	.+18     	; 0x18c <app_Start+0x88>
	while (1)
	{
		
		int flag1 = 0, flag2 = 0, flag3 = 0;
		led_turn_on(&led_1);
		for(int i = 0; i < 5; i++){
 17a:	2f ef       	ldi	r18, 0xFF	; 255
 17c:	e2 1a       	sub	r14, r18
 17e:	f2 0a       	sbc	r15, r18
 180:	85 e0       	ldi	r24, 0x05	; 5
 182:	e8 16       	cp	r14, r24
 184:	f1 04       	cpc	r15, r1
 186:	dc f2       	brlt	.-74     	; 0x13e <app_Start+0x3a>
	application_initialize();
	
	while (1)
	{
		
		int flag1 = 0, flag2 = 0, flag3 = 0;
 188:	e1 2c       	mov	r14, r1
 18a:	f1 2c       	mov	r15, r1
				_delay_ms(500);
				flag1 = 1;
				break;
			}
		}
		led_turn_off(&led_1);
 18c:	89 e6       	ldi	r24, 0x69	; 105
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 4d 02 	call	0x49a	; 0x49a <led_turn_off>
		for(int i = 0; i < 5; i++){
 194:	c1 2c       	mov	r12, r1
 196:	d1 2c       	mov	r13, r1
 198:	59 c0       	rjmp	.+178    	; 0x24c <app_Start+0x148>
			led_toggle_logic(&led_2);
 19a:	88 e6       	ldi	r24, 0x68	; 104
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 77 02 	call	0x4ee	; 0x4ee <led_toggle_logic>
			if(flag1 == 1) led_toggle_logic(&led_5);
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	e9 16       	cp	r14, r25
 1a6:	f1 04       	cpc	r15, r1
 1a8:	21 f4       	brne	.+8      	; 0x1b2 <app_Start+0xae>
 1aa:	85 e6       	ldi	r24, 0x65	; 101
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 77 02 	call	0x4ee	; 0x4ee <led_toggle_logic>
	application_initialize();
	
	while (1)
	{
		
		int flag1 = 0, flag2 = 0, flag3 = 0;
 1b2:	c0 e0       	ldi	r28, 0x00	; 0
 1b4:	d0 e0       	ldi	r29, 0x00	; 0
 1b6:	00 e0       	ldi	r16, 0x00	; 0
 1b8:	10 e0       	ldi	r17, 0x00	; 0
 1ba:	13 c0       	rjmp	.+38     	; 0x1e2 <app_Start+0xde>
		for(int i = 0; i < 5; i++){
			led_toggle_logic(&led_2);
			if(flag1 == 1) led_toggle_logic(&led_5);
			int flag_yellow = 0;
			for(int j = 0; j < 1000; j++){
				button_read_state(&btn_1, &button_1);
 1bc:	60 e6       	ldi	r22, 0x60	; 96
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	81 e6       	ldi	r24, 0x61	; 97
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 b5 01 	call	0x36a	; 0x36a <button_read_state>
				if(button_1 == BUTTON_PRESSED) flag_yellow++;
 1c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1cc:	81 11       	cpse	r24, r1
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <app_Start+0xd0>
 1d0:	0f 5f       	subi	r16, 0xFF	; 255
 1d2:	1f 4f       	sbci	r17, 0xFF	; 255
 1d4:	89 ef       	ldi	r24, 0xF9	; 249
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <app_Start+0xd4>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <app_Start+0xda>
 1de:	00 00       	nop
		led_turn_off(&led_1);
		for(int i = 0; i < 5; i++){
			led_toggle_logic(&led_2);
			if(flag1 == 1) led_toggle_logic(&led_5);
			int flag_yellow = 0;
			for(int j = 0; j < 1000; j++){
 1e0:	21 96       	adiw	r28, 0x01	; 1
 1e2:	c8 3e       	cpi	r28, 0xE8	; 232
 1e4:	93 e0       	ldi	r25, 0x03	; 3
 1e6:	d9 07       	cpc	r29, r25
 1e8:	4c f3       	brlt	.-46     	; 0x1bc <app_Start+0xb8>
				button_read_state(&btn_1, &button_1);
				if(button_1 == BUTTON_PRESSED) flag_yellow++;
				_delay_ms(1);
			}
			if(flag_yellow > 0 && flag_yellow < 250 && flag2 == 0){
 1ea:	01 50       	subi	r16, 0x01	; 1
 1ec:	11 09       	sbc	r17, r1
 1ee:	09 3f       	cpi	r16, 0xF9	; 249
 1f0:	11 05       	cpc	r17, r1
 1f2:	48 f5       	brcc	.+82     	; 0x246 <app_Start+0x142>
				led_turn_on(&led_6);
 1f4:	84 e6       	ldi	r24, 0x64	; 100
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 23 02 	call	0x446	; 0x446 <led_turn_on>
 1fc:	2f e9       	ldi	r18, 0x9F	; 159
 1fe:	86 e8       	ldi	r24, 0x86	; 134
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	21 50       	subi	r18, 0x01	; 1
 204:	80 40       	sbci	r24, 0x00	; 0
 206:	90 40       	sbci	r25, 0x00	; 0
 208:	e1 f7       	brne	.-8      	; 0x202 <app_Start+0xfe>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <app_Start+0x108>
 20c:	00 00       	nop
				_delay_ms(500);
				for(int k = 0; k < 10; k++){
 20e:	c0 e0       	ldi	r28, 0x00	; 0
 210:	d0 e0       	ldi	r29, 0x00	; 0
 212:	12 c0       	rjmp	.+36     	; 0x238 <app_Start+0x134>
					led_toggle_logic(&led_2);
 214:	88 e6       	ldi	r24, 0x68	; 104
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 77 02 	call	0x4ee	; 0x4ee <led_toggle_logic>
					led_toggle_logic(&led_5);
 21c:	85 e6       	ldi	r24, 0x65	; 101
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 77 02 	call	0x4ee	; 0x4ee <led_toggle_logic>
 224:	2f e9       	ldi	r18, 0x9F	; 159
 226:	86 e8       	ldi	r24, 0x86	; 134
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	21 50       	subi	r18, 0x01	; 1
 22c:	80 40       	sbci	r24, 0x00	; 0
 22e:	90 40       	sbci	r25, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <app_Start+0x126>
 232:	00 c0       	rjmp	.+0      	; 0x234 <app_Start+0x130>
 234:	00 00       	nop
				_delay_ms(1);
			}
			if(flag_yellow > 0 && flag_yellow < 250 && flag2 == 0){
				led_turn_on(&led_6);
				_delay_ms(500);
				for(int k = 0; k < 10; k++){
 236:	21 96       	adiw	r28, 0x01	; 1
 238:	ca 30       	cpi	r28, 0x0A	; 10
 23a:	d1 05       	cpc	r29, r1
 23c:	5c f3       	brlt	.-42     	; 0x214 <app_Start+0x110>
					led_toggle_logic(&led_2);
					led_toggle_logic(&led_5);
					_delay_ms(500);
				}
				flag2 = 1;
 23e:	aa 24       	eor	r10, r10
 240:	a3 94       	inc	r10
 242:	b1 2c       	mov	r11, r1
 244:	0a c0       	rjmp	.+20     	; 0x25a <app_Start+0x156>
				flag1 = 1;
				break;
			}
		}
		led_turn_off(&led_1);
		for(int i = 0; i < 5; i++){
 246:	2f ef       	ldi	r18, 0xFF	; 255
 248:	c2 1a       	sub	r12, r18
 24a:	d2 0a       	sbc	r13, r18
 24c:	85 e0       	ldi	r24, 0x05	; 5
 24e:	c8 16       	cp	r12, r24
 250:	d1 04       	cpc	r13, r1
 252:	0c f4       	brge	.+2      	; 0x256 <app_Start+0x152>
 254:	a2 cf       	rjmp	.-188    	; 0x19a <app_Start+0x96>
	application_initialize();
	
	while (1)
	{
		
		int flag1 = 0, flag2 = 0, flag3 = 0;
 256:	a1 2c       	mov	r10, r1
 258:	b1 2c       	mov	r11, r1
				}
				flag2 = 1;
				break;
			}
		}
		led_turn_off(&led_2);
 25a:	88 e6       	ldi	r24, 0x68	; 104
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 4d 02 	call	0x49a	; 0x49a <led_turn_off>
		if(flag1 == 1 || flag2 == 1) led_turn_off(&led_5);
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	e9 16       	cp	r14, r25
 266:	f1 04       	cpc	r15, r1
 268:	21 f0       	breq	.+8      	; 0x272 <app_Start+0x16e>
 26a:	21 e0       	ldi	r18, 0x01	; 1
 26c:	a2 16       	cp	r10, r18
 26e:	b1 04       	cpc	r11, r1
 270:	21 f4       	brne	.+8      	; 0x27a <app_Start+0x176>
 272:	85 e6       	ldi	r24, 0x65	; 101
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 4d 02 	call	0x49a	; 0x49a <led_turn_off>
		if(flag1 == 1 || flag2 == 1) led_turn_off(&led_6);
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	e8 16       	cp	r14, r24
 27e:	f1 04       	cpc	r15, r1
 280:	21 f0       	breq	.+8      	; 0x28a <app_Start+0x186>
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	a9 16       	cp	r10, r25
 286:	b1 04       	cpc	r11, r1
 288:	21 f4       	brne	.+8      	; 0x292 <app_Start+0x18e>
 28a:	84 e6       	ldi	r24, 0x64	; 100
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 4d 02 	call	0x49a	; 0x49a <led_turn_off>
		led_turn_on(&led_3);
 292:	87 e6       	ldi	r24, 0x67	; 103
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 23 02 	call	0x446	; 0x446 <led_turn_on>
		if(flag1 == 1 || flag2 == 1) led_turn_on(&led_4);
 29a:	21 e0       	ldi	r18, 0x01	; 1
 29c:	e2 16       	cp	r14, r18
 29e:	f1 04       	cpc	r15, r1
 2a0:	21 f0       	breq	.+8      	; 0x2aa <app_Start+0x1a6>
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	a8 16       	cp	r10, r24
 2a6:	b1 04       	cpc	r11, r1
 2a8:	21 f4       	brne	.+8      	; 0x2b2 <app_Start+0x1ae>
 2aa:	86 e6       	ldi	r24, 0x66	; 102
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 23 02 	call	0x446	; 0x446 <led_turn_on>
 2b2:	c1 2c       	mov	r12, r1
 2b4:	d1 2c       	mov	r13, r1
 2b6:	34 c0       	rjmp	.+104    	; 0x320 <app_Start+0x21c>
		for(int i = 0; i < 5; i++){
			int flag_red = 0;
			for(int j = 0; j < 1000; j++){
				button_read_state(&btn_1, &button_1);
 2b8:	60 e6       	ldi	r22, 0x60	; 96
 2ba:	70 e0       	ldi	r23, 0x00	; 0
 2bc:	81 e6       	ldi	r24, 0x61	; 97
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 b5 01 	call	0x36a	; 0x36a <button_read_state>
				if(button_1 == BUTTON_PRESSED) flag_red++;
 2c4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2c8:	81 11       	cpse	r24, r1
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <app_Start+0x1cc>
 2cc:	0f 5f       	subi	r16, 0xFF	; 255
 2ce:	1f 4f       	sbci	r17, 0xFF	; 255
 2d0:	89 ef       	ldi	r24, 0xF9	; 249
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <app_Start+0x1d0>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <app_Start+0x1d6>
 2da:	00 00       	nop
		if(flag1 == 1 || flag2 == 1) led_turn_off(&led_6);
		led_turn_on(&led_3);
		if(flag1 == 1 || flag2 == 1) led_turn_on(&led_4);
		for(int i = 0; i < 5; i++){
			int flag_red = 0;
			for(int j = 0; j < 1000; j++){
 2dc:	21 96       	adiw	r28, 0x01	; 1
 2de:	04 c0       	rjmp	.+8      	; 0x2e8 <app_Start+0x1e4>
 2e0:	c0 e0       	ldi	r28, 0x00	; 0
 2e2:	d0 e0       	ldi	r29, 0x00	; 0
 2e4:	00 e0       	ldi	r16, 0x00	; 0
 2e6:	10 e0       	ldi	r17, 0x00	; 0
 2e8:	c8 3e       	cpi	r28, 0xE8	; 232
 2ea:	93 e0       	ldi	r25, 0x03	; 3
 2ec:	d9 07       	cpc	r29, r25
 2ee:	24 f3       	brlt	.-56     	; 0x2b8 <app_Start+0x1b4>
				button_read_state(&btn_1, &button_1);
				if(button_1 == BUTTON_PRESSED) flag_red++;
				_delay_ms(1);
			}
			if(flag_red > 0 && flag_red < 250 && flag3 == 0){
 2f0:	01 50       	subi	r16, 0x01	; 1
 2f2:	11 09       	sbc	r17, r1
 2f4:	09 3f       	cpi	r16, 0xF9	; 249
 2f6:	11 05       	cpc	r17, r1
 2f8:	80 f4       	brcc	.+32     	; 0x31a <app_Start+0x216>
				led_turn_on(&led_4);
 2fa:	86 e6       	ldi	r24, 0x66	; 102
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 23 02 	call	0x446	; 0x446 <led_turn_on>
 302:	2f e3       	ldi	r18, 0x3F	; 63
 304:	82 e4       	ldi	r24, 0x42	; 66
 306:	9f e0       	ldi	r25, 0x0F	; 15
 308:	21 50       	subi	r18, 0x01	; 1
 30a:	80 40       	sbci	r24, 0x00	; 0
 30c:	90 40       	sbci	r25, 0x00	; 0
 30e:	e1 f7       	brne	.-8      	; 0x308 <app_Start+0x204>
 310:	00 c0       	rjmp	.+0      	; 0x312 <app_Start+0x20e>
 312:	00 00       	nop
				_delay_ms(5000);
				flag3 = 1;
 314:	c1 e0       	ldi	r28, 0x01	; 1
 316:	d0 e0       	ldi	r29, 0x00	; 0
				break;
 318:	09 c0       	rjmp	.+18     	; 0x32c <app_Start+0x228>
		led_turn_off(&led_2);
		if(flag1 == 1 || flag2 == 1) led_turn_off(&led_5);
		if(flag1 == 1 || flag2 == 1) led_turn_off(&led_6);
		led_turn_on(&led_3);
		if(flag1 == 1 || flag2 == 1) led_turn_on(&led_4);
		for(int i = 0; i < 5; i++){
 31a:	2f ef       	ldi	r18, 0xFF	; 255
 31c:	c2 1a       	sub	r12, r18
 31e:	d2 0a       	sbc	r13, r18
 320:	85 e0       	ldi	r24, 0x05	; 5
 322:	c8 16       	cp	r12, r24
 324:	d1 04       	cpc	r13, r1
 326:	e4 f2       	brlt	.-72     	; 0x2e0 <app_Start+0x1dc>
	application_initialize();
	
	while (1)
	{
		
		int flag1 = 0, flag2 = 0, flag3 = 0;
 328:	c0 e0       	ldi	r28, 0x00	; 0
 32a:	d0 e0       	ldi	r29, 0x00	; 0
				_delay_ms(5000);
				flag3 = 1;
				break;
			}
		}
		led_turn_off(&led_3);
 32c:	87 e6       	ldi	r24, 0x67	; 103
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 4d 02 	call	0x49a	; 0x49a <led_turn_off>
		if(flag3 == 1) led_turn_off(&led_4);
 334:	21 97       	sbiw	r28, 0x01	; 1
 336:	21 f4       	brne	.+8      	; 0x340 <app_Start+0x23c>
 338:	86 e6       	ldi	r24, 0x66	; 102
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 4d 02 	call	0x49a	; 0x49a <led_turn_off>
		if(flag1 == 1 || flag2 == 1) led_turn_off(&led_4);
 340:	ea 94       	dec	r14
 342:	ef 28       	or	r14, r15
 344:	21 f0       	breq	.+8      	; 0x34e <app_Start+0x24a>
 346:	aa 94       	dec	r10
 348:	ab 28       	or	r10, r11
 34a:	09 f0       	breq	.+2      	; 0x34e <app_Start+0x24a>
 34c:	dd ce       	rjmp	.-582    	; 0x108 <app_Start+0x4>
 34e:	86 e6       	ldi	r24, 0x66	; 102
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 4d 02 	call	0x49a	; 0x49a <led_turn_off>
 356:	d8 ce       	rjmp	.-592    	; 0x108 <app_Start+0x4>

00000358 <main>:
	}
}

int main(void)
{
	app_Start();
 358:	0e 94 82 00 	call	0x104	; 0x104 <app_Start>

0000035c <button_initialize>:
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue while performing this action
 */
STD_ReturnType button_initialize(const button_t *btn){
    STD_ReturnType ret = E_OK;
    if(NULL == btn){
 35c:	00 97       	sbiw	r24, 0x00	; 0
 35e:	19 f0       	breq	.+6      	; 0x366 <button_initialize+0xa>
        ret = E_NOT_OK;
    }
    else{
        ret = gpio_pin_direction_init(&(btn->button_pin));
 360:	0e 94 a0 02 	call	0x540	; 0x540 <gpio_pin_direction_init>
 364:	08 95       	ret
 *          (E_NOT_OK) : The function has issue while performing this action
 */
STD_ReturnType button_initialize(const button_t *btn){
    STD_ReturnType ret = E_OK;
    if(NULL == btn){
        ret = E_NOT_OK;
 366:	80 e0       	ldi	r24, 0x00	; 0
    }
    else{
        ret = gpio_pin_direction_init(&(btn->button_pin));
    }
    return ret;
}
 368:	08 95       	ret

0000036a <button_read_state>:
 * @param btn_state button state @ref button_state_t
 * @return  Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue while performing this action
 */
STD_ReturnType button_read_state(const button_t *btn, button_state_t *btn_state){
 36a:	ef 92       	push	r14
 36c:	ff 92       	push	r15
 36e:	0f 93       	push	r16
 370:	1f 93       	push	r17
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	1f 92       	push	r1
 378:	cd b7       	in	r28, 0x3d	; 61
 37a:	de b7       	in	r29, 0x3e	; 62
    STD_ReturnType ret = E_NOT_OK;
    logic_t Pin_Logic_Status = GPIO_LOW;
 37c:	19 82       	std	Y+1, r1	; 0x01
    if((NULL == btn) || (NULL == btn_state)){
 37e:	00 97       	sbiw	r24, 0x00	; 0
 380:	11 f1       	breq	.+68     	; 0x3c6 <button_read_state+0x5c>
 382:	61 15       	cp	r22, r1
 384:	71 05       	cpc	r23, r1
 386:	f9 f0       	breq	.+62     	; 0x3c6 <button_read_state+0x5c>
 388:	7b 01       	movw	r14, r22
 38a:	8c 01       	movw	r16, r24
        ret = E_NOT_OK;
    }
    else{
        gpio_pin_read_logic(&(btn->button_pin), &Pin_Logic_Status);
 38c:	be 01       	movw	r22, r28
 38e:	6f 5f       	subi	r22, 0xFF	; 255
 390:	7f 4f       	sbci	r23, 0xFF	; 255
 392:	0e 94 2c 03 	call	0x658	; 0x658 <gpio_pin_read_logic>
        if(BUTTON_ACTIVE_HIGH == btn->button_connection){
 396:	f8 01       	movw	r30, r16
 398:	82 81       	ldd	r24, Z+2	; 0x02
 39a:	81 11       	cpse	r24, r1
 39c:	0a c0       	rjmp	.+20     	; 0x3b2 <button_read_state+0x48>
            if(GPIO_HIGH == Pin_Logic_Status){
 39e:	89 81       	ldd	r24, Y+1	; 0x01
 3a0:	81 30       	cpi	r24, 0x01	; 1
 3a2:	19 f4       	brne	.+6      	; 0x3aa <button_read_state+0x40>
                *btn_state = BUTTON_PRESSED;
 3a4:	f7 01       	movw	r30, r14
 3a6:	10 82       	st	Z, r1
 3a8:	0e c0       	rjmp	.+28     	; 0x3c6 <button_read_state+0x5c>
            }
            else{
                *btn_state = BUTTON_RELEASED;
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	f7 01       	movw	r30, r14
 3ae:	80 83       	st	Z, r24
 3b0:	0a c0       	rjmp	.+20     	; 0x3c6 <button_read_state+0x5c>
            }
        }
        else if(BUTTON_ACTIVE_LOW == btn->button_connection){
 3b2:	81 30       	cpi	r24, 0x01	; 1
 3b4:	41 f4       	brne	.+16     	; 0x3c6 <button_read_state+0x5c>
            if(GPIO_HIGH == Pin_Logic_Status){
 3b6:	89 81       	ldd	r24, Y+1	; 0x01
 3b8:	81 30       	cpi	r24, 0x01	; 1
 3ba:	19 f4       	brne	.+6      	; 0x3c2 <button_read_state+0x58>
                *btn_state = BUTTON_RELEASED;
 3bc:	f7 01       	movw	r30, r14
 3be:	80 83       	st	Z, r24
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <button_read_state+0x5c>
            }
            else{
                *btn_state = BUTTON_PRESSED;
 3c2:	f7 01       	movw	r30, r14
 3c4:	10 82       	st	Z, r1
            }
        }
    }
    return ret;
}
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	0f 90       	pop	r0
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	1f 91       	pop	r17
 3d0:	0f 91       	pop	r16
 3d2:	ff 90       	pop	r15
 3d4:	ef 90       	pop	r14
 3d6:	08 95       	ret

000003d8 <led_initialize>:

 /* Section : Function Declaration */



STD_ReturnType led_initialize(const led_t *led){
 3d8:	0f 93       	push	r16
 3da:	1f 93       	push	r17
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	1f 92       	push	r1
 3e2:	cd b7       	in	r28, 0x3d	; 61
 3e4:	de b7       	in	r29, 0x3e	; 62
	STD_ReturnType ret = E_OK;
	if(led == NULL) ret = E_NOT_OK;
 3e6:	00 97       	sbiw	r24, 0x00	; 0
 3e8:	39 f1       	breq	.+78     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 3ea:	8c 01       	movw	r16, r24
	else{
		pin_config_t pin_obj = {
			.port = led->port_name,
 3ec:	fc 01       	movw	r30, r24
 3ee:	80 81       	ld	r24, Z

STD_ReturnType led_initialize(const led_t *led){
	STD_ReturnType ret = E_OK;
	if(led == NULL) ret = E_NOT_OK;
	else{
		pin_config_t pin_obj = {
 3f0:	28 2f       	mov	r18, r24
 3f2:	27 70       	andi	r18, 0x07	; 7
 3f4:	99 81       	ldd	r25, Y+1	; 0x01
 3f6:	98 7f       	andi	r25, 0xF8	; 248
 3f8:	92 2b       	or	r25, r18
			.port = led->port_name,
			.pin = led->pin_number,
 3fa:	28 2f       	mov	r18, r24
 3fc:	22 95       	swap	r18
 3fe:	2f 70       	andi	r18, 0x0F	; 15

STD_ReturnType led_initialize(const led_t *led){
	STD_ReturnType ret = E_OK;
	if(led == NULL) ret = E_NOT_OK;
	else{
		pin_config_t pin_obj = {
 400:	27 70       	andi	r18, 0x07	; 7
 402:	22 0f       	add	r18, r18
 404:	22 0f       	add	r18, r18
 406:	22 0f       	add	r18, r18
 408:	97 7c       	andi	r25, 0xC7	; 199
 40a:	92 2b       	or	r25, r18
			.port = led->port_name,
			.pin = led->pin_number,
			.direction = GPIO_INPUT_DIRECTION,
			.logic = led->led_status
 40c:	87 fb       	bst	r24, 7
 40e:	88 27       	eor	r24, r24
 410:	80 f9       	bld	r24, 0

STD_ReturnType led_initialize(const led_t *led){
	STD_ReturnType ret = E_OK;
	if(led == NULL) ret = E_NOT_OK;
	else{
		pin_config_t pin_obj = {
 412:	90 64       	ori	r25, 0x40	; 64
 414:	80 fb       	bst	r24, 0
 416:	97 f9       	bld	r25, 7
 418:	99 83       	std	Y+1, r25	; 0x01
			.port = led->port_name,
			.pin = led->pin_number,
			.direction = GPIO_INPUT_DIRECTION,
			.logic = led->led_status
		};
		gpio_pin_direction_init(&pin_obj);
 41a:	ce 01       	movw	r24, r28
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	0e 94 a0 02 	call	0x540	; 0x540 <gpio_pin_direction_init>
		gpio_pin_write_logic(&pin_obj, led->led_status);
 422:	f8 01       	movw	r30, r16
 424:	60 81       	ld	r22, Z
 426:	67 fb       	bst	r22, 7
 428:	66 27       	eor	r22, r22
 42a:	60 f9       	bld	r22, 0
 42c:	ce 01       	movw	r24, r28
 42e:	01 96       	adiw	r24, 0x01	; 1
 430:	0e 94 e6 02 	call	0x5cc	; 0x5cc <gpio_pin_write_logic>
 /* Section : Function Declaration */



STD_ReturnType led_initialize(const led_t *led){
	STD_ReturnType ret = E_OK;
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	01 c0       	rjmp	.+2      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
	if(led == NULL) ret = E_NOT_OK;
 438:	80 e0       	ldi	r24, 0x00	; 0
		};
		gpio_pin_direction_init(&pin_obj);
		gpio_pin_write_logic(&pin_obj, led->led_status);
	}
	return ret;
}
 43a:	0f 90       	pop	r0
 43c:	df 91       	pop	r29
 43e:	cf 91       	pop	r28
 440:	1f 91       	pop	r17
 442:	0f 91       	pop	r16
 444:	08 95       	ret

00000446 <led_turn_on>:


STD_ReturnType led_turn_on(const led_t *led){
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	1f 92       	push	r1
 44c:	cd b7       	in	r28, 0x3d	; 61
 44e:	de b7       	in	r29, 0x3e	; 62
	STD_ReturnType ret = E_OK;
	
	if(led == NULL) ret = E_NOT_OK;
 450:	00 97       	sbiw	r24, 0x00	; 0
 452:	f1 f0       	breq	.+60     	; 0x490 <led_turn_on+0x4a>
 454:	fc 01       	movw	r30, r24
	else{
		pin_config_t pin_obj = {
			.port = led->port_name,
 456:	20 81       	ld	r18, Z
STD_ReturnType led_turn_on(const led_t *led){
	STD_ReturnType ret = E_OK;
	
	if(led == NULL) ret = E_NOT_OK;
	else{
		pin_config_t pin_obj = {
 458:	92 2f       	mov	r25, r18
 45a:	97 70       	andi	r25, 0x07	; 7
 45c:	89 81       	ldd	r24, Y+1	; 0x01
 45e:	88 7f       	andi	r24, 0xF8	; 248
 460:	89 2b       	or	r24, r25
			.port = led->port_name,
			.pin = led->pin_number,
 462:	92 2f       	mov	r25, r18
 464:	92 95       	swap	r25
 466:	9f 70       	andi	r25, 0x0F	; 15
STD_ReturnType led_turn_on(const led_t *led){
	STD_ReturnType ret = E_OK;
	
	if(led == NULL) ret = E_NOT_OK;
	else{
		pin_config_t pin_obj = {
 468:	97 70       	andi	r25, 0x07	; 7
 46a:	99 0f       	add	r25, r25
 46c:	99 0f       	add	r25, r25
 46e:	99 0f       	add	r25, r25
 470:	87 7c       	andi	r24, 0xC7	; 199
 472:	89 2b       	or	r24, r25
			.port = led->port_name,
			.pin = led->pin_number,
			.direction = GPIO_INPUT_DIRECTION,
			.logic = led->led_status
 474:	27 fb       	bst	r18, 7
 476:	22 27       	eor	r18, r18
 478:	20 f9       	bld	r18, 0
STD_ReturnType led_turn_on(const led_t *led){
	STD_ReturnType ret = E_OK;
	
	if(led == NULL) ret = E_NOT_OK;
	else{
		pin_config_t pin_obj = {
 47a:	80 64       	ori	r24, 0x40	; 64
 47c:	20 fb       	bst	r18, 0
 47e:	87 f9       	bld	r24, 7
 480:	89 83       	std	Y+1, r24	; 0x01
			.port = led->port_name,
			.pin = led->pin_number,
			.direction = GPIO_INPUT_DIRECTION,
			.logic = led->led_status
		};
		gpio_pin_write_logic(&pin_obj, GPIO_HIGH);
 482:	61 e0       	ldi	r22, 0x01	; 1
 484:	ce 01       	movw	r24, r28
 486:	01 96       	adiw	r24, 0x01	; 1
 488:	0e 94 e6 02 	call	0x5cc	; 0x5cc <gpio_pin_write_logic>
	return ret;
}


STD_ReturnType led_turn_on(const led_t *led){
	STD_ReturnType ret = E_OK;
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	01 c0       	rjmp	.+2      	; 0x492 <led_turn_on+0x4c>
	
	if(led == NULL) ret = E_NOT_OK;
 490:	80 e0       	ldi	r24, 0x00	; 0
			.logic = led->led_status
		};
		gpio_pin_write_logic(&pin_obj, GPIO_HIGH);
	}
	return ret;
}
 492:	0f 90       	pop	r0
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	08 95       	ret

0000049a <led_turn_off>:


STD_ReturnType led_turn_off(const led_t *led){
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	1f 92       	push	r1
 4a0:	cd b7       	in	r28, 0x3d	; 61
 4a2:	de b7       	in	r29, 0x3e	; 62
	STD_ReturnType ret = E_OK;
	if(led == NULL) ret = E_NOT_OK;
 4a4:	00 97       	sbiw	r24, 0x00	; 0
 4a6:	f1 f0       	breq	.+60     	; 0x4e4 <led_turn_off+0x4a>
 4a8:	fc 01       	movw	r30, r24
	else{
		pin_config_t pin_obj = {
			.port = led->port_name,
 4aa:	20 81       	ld	r18, Z

STD_ReturnType led_turn_off(const led_t *led){
	STD_ReturnType ret = E_OK;
	if(led == NULL) ret = E_NOT_OK;
	else{
		pin_config_t pin_obj = {
 4ac:	92 2f       	mov	r25, r18
 4ae:	97 70       	andi	r25, 0x07	; 7
 4b0:	89 81       	ldd	r24, Y+1	; 0x01
 4b2:	88 7f       	andi	r24, 0xF8	; 248
 4b4:	89 2b       	or	r24, r25
			.port = led->port_name,
			.pin = led->pin_number,
 4b6:	92 2f       	mov	r25, r18
 4b8:	92 95       	swap	r25
 4ba:	9f 70       	andi	r25, 0x0F	; 15

STD_ReturnType led_turn_off(const led_t *led){
	STD_ReturnType ret = E_OK;
	if(led == NULL) ret = E_NOT_OK;
	else{
		pin_config_t pin_obj = {
 4bc:	97 70       	andi	r25, 0x07	; 7
 4be:	99 0f       	add	r25, r25
 4c0:	99 0f       	add	r25, r25
 4c2:	99 0f       	add	r25, r25
 4c4:	87 7c       	andi	r24, 0xC7	; 199
 4c6:	89 2b       	or	r24, r25
			.port = led->port_name,
			.pin = led->pin_number,
			.direction = GPIO_INPUT_DIRECTION,
			.logic = led->led_status
 4c8:	27 fb       	bst	r18, 7
 4ca:	22 27       	eor	r18, r18
 4cc:	20 f9       	bld	r18, 0

STD_ReturnType led_turn_off(const led_t *led){
	STD_ReturnType ret = E_OK;
	if(led == NULL) ret = E_NOT_OK;
	else{
		pin_config_t pin_obj = {
 4ce:	80 64       	ori	r24, 0x40	; 64
 4d0:	20 fb       	bst	r18, 0
 4d2:	87 f9       	bld	r24, 7
 4d4:	89 83       	std	Y+1, r24	; 0x01
			.port = led->port_name,
			.pin = led->pin_number,
			.direction = GPIO_INPUT_DIRECTION,
			.logic = led->led_status
		};
		gpio_pin_write_logic(&pin_obj, GPIO_LOW);
 4d6:	60 e0       	ldi	r22, 0x00	; 0
 4d8:	ce 01       	movw	r24, r28
 4da:	01 96       	adiw	r24, 0x01	; 1
 4dc:	0e 94 e6 02 	call	0x5cc	; 0x5cc <gpio_pin_write_logic>
	return ret;
}


STD_ReturnType led_turn_off(const led_t *led){
	STD_ReturnType ret = E_OK;
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	01 c0       	rjmp	.+2      	; 0x4e6 <led_turn_off+0x4c>
	if(led == NULL) ret = E_NOT_OK;
 4e4:	80 e0       	ldi	r24, 0x00	; 0
			.logic = led->led_status
		};
		gpio_pin_write_logic(&pin_obj, GPIO_LOW);
	}
	return ret;
}
 4e6:	0f 90       	pop	r0
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	08 95       	ret

000004ee <led_toggle_logic>:


STD_ReturnType led_toggle_logic(const led_t *led){
 4ee:	cf 93       	push	r28
 4f0:	df 93       	push	r29
 4f2:	1f 92       	push	r1
 4f4:	cd b7       	in	r28, 0x3d	; 61
 4f6:	de b7       	in	r29, 0x3e	; 62
	STD_ReturnType ret = E_OK;
	if(led == NULL) ret = E_NOT_OK;
 4f8:	00 97       	sbiw	r24, 0x00	; 0
 4fa:	e9 f0       	breq	.+58     	; 0x536 <led_toggle_logic+0x48>
 4fc:	fc 01       	movw	r30, r24
	else{
		pin_config_t pin_obj = {
			.port = led->port_name,
 4fe:	20 81       	ld	r18, Z

STD_ReturnType led_toggle_logic(const led_t *led){
	STD_ReturnType ret = E_OK;
	if(led == NULL) ret = E_NOT_OK;
	else{
		pin_config_t pin_obj = {
 500:	92 2f       	mov	r25, r18
 502:	97 70       	andi	r25, 0x07	; 7
 504:	89 81       	ldd	r24, Y+1	; 0x01
 506:	88 7f       	andi	r24, 0xF8	; 248
 508:	89 2b       	or	r24, r25
			.port = led->port_name,
			.pin = led->pin_number,
 50a:	92 2f       	mov	r25, r18
 50c:	92 95       	swap	r25
 50e:	9f 70       	andi	r25, 0x0F	; 15

STD_ReturnType led_toggle_logic(const led_t *led){
	STD_ReturnType ret = E_OK;
	if(led == NULL) ret = E_NOT_OK;
	else{
		pin_config_t pin_obj = {
 510:	97 70       	andi	r25, 0x07	; 7
 512:	99 0f       	add	r25, r25
 514:	99 0f       	add	r25, r25
 516:	99 0f       	add	r25, r25
 518:	87 7c       	andi	r24, 0xC7	; 199
 51a:	89 2b       	or	r24, r25
			.port = led->port_name,
			.pin = led->pin_number,
			.direction = GPIO_INPUT_DIRECTION,
			.logic = led->led_status
 51c:	27 fb       	bst	r18, 7
 51e:	22 27       	eor	r18, r18
 520:	20 f9       	bld	r18, 0

STD_ReturnType led_toggle_logic(const led_t *led){
	STD_ReturnType ret = E_OK;
	if(led == NULL) ret = E_NOT_OK;
	else{
		pin_config_t pin_obj = {
 522:	80 64       	ori	r24, 0x40	; 64
 524:	20 fb       	bst	r18, 0
 526:	87 f9       	bld	r24, 7
 528:	89 83       	std	Y+1, r24	; 0x01
			.port = led->port_name,
			.pin = led->pin_number,
			.direction = GPIO_INPUT_DIRECTION,
			.logic = led->led_status
		};
		gpio_pin_toggle_logic(&pin_obj);
 52a:	ce 01       	movw	r24, r28
 52c:	01 96       	adiw	r24, 0x01	; 1
 52e:	0e 94 57 03 	call	0x6ae	; 0x6ae <gpio_pin_toggle_logic>
	return ret;
}


STD_ReturnType led_toggle_logic(const led_t *led){
	STD_ReturnType ret = E_OK;
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	01 c0       	rjmp	.+2      	; 0x538 <led_toggle_logic+0x4a>
	if(led == NULL) ret = E_NOT_OK;
 536:	80 e0       	ldi	r24, 0x00	; 0
			.logic = led->led_status
		};
		gpio_pin_toggle_logic(&pin_obj);
	}
	return ret;
}
 538:	0f 90       	pop	r0
 53a:	df 91       	pop	r29
 53c:	cf 91       	pop	r28
 53e:	08 95       	ret

00000540 <gpio_pin_direction_init>:
    if(_pin_config_t == NULL || direction_status == NULL || (_pin_config_t->port > MAX_PORT_NUM - 1) || (_pin_config_t->pin > MAX_PIN_NUM - 1)) ret = E_NOT_OK;
    else{
       *direction_status = READ_BIT(*ddr_register[_pin_config_t->port], _pin_config_t->pin);
    }
    return ret;
}
 540:	00 97       	sbiw	r24, 0x00	; 0
 542:	f1 f1       	breq	.+124    	; 0x5c0 <gpio_pin_direction_init+0x80>
 544:	fc 01       	movw	r30, r24
 546:	20 81       	ld	r18, Z
 548:	27 70       	andi	r18, 0x07	; 7
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	24 30       	cpi	r18, 0x04	; 4
 54e:	31 05       	cpc	r19, r1
 550:	cc f5       	brge	.+114    	; 0x5c4 <gpio_pin_direction_init+0x84>
 552:	40 81       	ld	r20, Z
 554:	46 95       	lsr	r20
 556:	46 95       	lsr	r20
 558:	46 95       	lsr	r20
 55a:	47 70       	andi	r20, 0x07	; 7
 55c:	80 81       	ld	r24, Z
 55e:	86 fb       	bst	r24, 6
 560:	99 27       	eor	r25, r25
 562:	90 f9       	bld	r25, 0
 564:	86 ff       	sbrs	r24, 6
 566:	03 c0       	rjmp	.+6      	; 0x56e <gpio_pin_direction_init+0x2e>
 568:	91 30       	cpi	r25, 0x01	; 1
 56a:	b1 f0       	breq	.+44     	; 0x598 <gpio_pin_direction_init+0x58>
 56c:	2d c0       	rjmp	.+90     	; 0x5c8 <gpio_pin_direction_init+0x88>
 56e:	22 0f       	add	r18, r18
 570:	33 1f       	adc	r19, r19
 572:	f9 01       	movw	r30, r18
 574:	e8 58       	subi	r30, 0x88	; 136
 576:	ff 4f       	sbci	r31, 0xFF	; 255
 578:	01 90       	ld	r0, Z+
 57a:	f0 81       	ld	r31, Z
 57c:	e0 2d       	mov	r30, r0
 57e:	20 81       	ld	r18, Z
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	02 c0       	rjmp	.+4      	; 0x58a <gpio_pin_direction_init+0x4a>
 586:	88 0f       	add	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	4a 95       	dec	r20
 58c:	e2 f7       	brpl	.-8      	; 0x586 <gpio_pin_direction_init+0x46>
 58e:	80 95       	com	r24
 590:	82 23       	and	r24, r18
 592:	80 83       	st	Z, r24
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	08 95       	ret
 598:	22 0f       	add	r18, r18
 59a:	33 1f       	adc	r19, r19
 59c:	f9 01       	movw	r30, r18
 59e:	e8 58       	subi	r30, 0x88	; 136
 5a0:	ff 4f       	sbci	r31, 0xFF	; 255
 5a2:	01 90       	ld	r0, Z+
 5a4:	f0 81       	ld	r31, Z
 5a6:	e0 2d       	mov	r30, r0
 5a8:	20 81       	ld	r18, Z
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <gpio_pin_direction_init+0x74>
 5b0:	88 0f       	add	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	4a 95       	dec	r20
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <gpio_pin_direction_init+0x70>
 5b8:	82 2b       	or	r24, r18
 5ba:	80 83       	st	Z, r24
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	08 95       	ret
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	08 95       	ret
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	08 95       	ret
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	08 95       	ret

000005cc <gpio_pin_write_logic>:
    @return : return 1 if initialization made successfully or 0.
*/

STD_ReturnType gpio_pin_write_logic(const pin_config_t *_pin_config_t, logic_t logic){
    STD_ReturnType ret = E_OK;
    if(_pin_config_t == NULL || (_pin_config_t->port > MAX_PORT_NUM - 1) || (_pin_config_t->pin > MAX_PIN_NUM - 1)) ret = E_NOT_OK;
 5cc:	00 97       	sbiw	r24, 0x00	; 0
 5ce:	f1 f1       	breq	.+124    	; 0x64c <gpio_pin_write_logic+0x80>
 5d0:	fc 01       	movw	r30, r24
 5d2:	20 81       	ld	r18, Z
 5d4:	27 70       	andi	r18, 0x07	; 7
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	24 30       	cpi	r18, 0x04	; 4
 5da:	31 05       	cpc	r19, r1
 5dc:	cc f5       	brge	.+114    	; 0x650 <gpio_pin_write_logic+0x84>
 5de:	80 81       	ld	r24, Z
 5e0:	86 95       	lsr	r24
 5e2:	86 95       	lsr	r24
 5e4:	86 95       	lsr	r24
 5e6:	87 70       	andi	r24, 0x07	; 7
    else{
        switch(logic){
 5e8:	66 23       	and	r22, r22
 5ea:	19 f0       	breq	.+6      	; 0x5f2 <gpio_pin_write_logic+0x26>
 5ec:	61 30       	cpi	r22, 0x01	; 1
 5ee:	c1 f0       	breq	.+48     	; 0x620 <gpio_pin_write_logic+0x54>
 5f0:	31 c0       	rjmp	.+98     	; 0x654 <gpio_pin_write_logic+0x88>
            case GPIO_LOW:
                CLEAR_BIT(*port_register[_pin_config_t->port], _pin_config_t->pin);
 5f2:	22 0f       	add	r18, r18
 5f4:	33 1f       	adc	r19, r19
 5f6:	f9 01       	movw	r30, r18
 5f8:	e0 59       	subi	r30, 0x90	; 144
 5fa:	ff 4f       	sbci	r31, 0xFF	; 255
 5fc:	01 90       	ld	r0, Z+
 5fe:	f0 81       	ld	r31, Z
 600:	e0 2d       	mov	r30, r0
 602:	40 81       	ld	r20, Z
 604:	21 e0       	ldi	r18, 0x01	; 1
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	b9 01       	movw	r22, r18
 60a:	02 c0       	rjmp	.+4      	; 0x610 <gpio_pin_write_logic+0x44>
 60c:	66 0f       	add	r22, r22
 60e:	77 1f       	adc	r23, r23
 610:	8a 95       	dec	r24
 612:	e2 f7       	brpl	.-8      	; 0x60c <gpio_pin_write_logic+0x40>
 614:	cb 01       	movw	r24, r22
 616:	80 95       	com	r24
 618:	84 23       	and	r24, r20
 61a:	80 83       	st	Z, r24
    @brief : assigned logic to pin
    @return : return 1 if initialization made successfully or 0.
*/

STD_ReturnType gpio_pin_write_logic(const pin_config_t *_pin_config_t, logic_t logic){
    STD_ReturnType ret = E_OK;
 61c:	81 e0       	ldi	r24, 0x01	; 1
    if(_pin_config_t == NULL || (_pin_config_t->port > MAX_PORT_NUM - 1) || (_pin_config_t->pin > MAX_PIN_NUM - 1)) ret = E_NOT_OK;
    else{
        switch(logic){
            case GPIO_LOW:
                CLEAR_BIT(*port_register[_pin_config_t->port], _pin_config_t->pin);
                break;
 61e:	08 95       	ret
            case GPIO_HIGH:
                SET_BIT(*port_register[_pin_config_t->port], _pin_config_t->pin);
 620:	22 0f       	add	r18, r18
 622:	33 1f       	adc	r19, r19
 624:	f9 01       	movw	r30, r18
 626:	e0 59       	subi	r30, 0x90	; 144
 628:	ff 4f       	sbci	r31, 0xFF	; 255
 62a:	01 90       	ld	r0, Z+
 62c:	f0 81       	ld	r31, Z
 62e:	e0 2d       	mov	r30, r0
 630:	40 81       	ld	r20, Z
 632:	21 e0       	ldi	r18, 0x01	; 1
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	b9 01       	movw	r22, r18
 638:	02 c0       	rjmp	.+4      	; 0x63e <gpio_pin_write_logic+0x72>
 63a:	66 0f       	add	r22, r22
 63c:	77 1f       	adc	r23, r23
 63e:	8a 95       	dec	r24
 640:	e2 f7       	brpl	.-8      	; 0x63a <gpio_pin_write_logic+0x6e>
 642:	cb 01       	movw	r24, r22
 644:	84 2b       	or	r24, r20
 646:	80 83       	st	Z, r24
    @brief : assigned logic to pin
    @return : return 1 if initialization made successfully or 0.
*/

STD_ReturnType gpio_pin_write_logic(const pin_config_t *_pin_config_t, logic_t logic){
    STD_ReturnType ret = E_OK;
 648:	81 e0       	ldi	r24, 0x01	; 1
            case GPIO_LOW:
                CLEAR_BIT(*port_register[_pin_config_t->port], _pin_config_t->pin);
                break;
            case GPIO_HIGH:
                SET_BIT(*port_register[_pin_config_t->port], _pin_config_t->pin);
                break;
 64a:	08 95       	ret
    @return : return 1 if initialization made successfully or 0.
*/

STD_ReturnType gpio_pin_write_logic(const pin_config_t *_pin_config_t, logic_t logic){
    STD_ReturnType ret = E_OK;
    if(_pin_config_t == NULL || (_pin_config_t->port > MAX_PORT_NUM - 1) || (_pin_config_t->pin > MAX_PIN_NUM - 1)) ret = E_NOT_OK;
 64c:	80 e0       	ldi	r24, 0x00	; 0
 64e:	08 95       	ret
 650:	80 e0       	ldi	r24, 0x00	; 0
 652:	08 95       	ret
                CLEAR_BIT(*port_register[_pin_config_t->port], _pin_config_t->pin);
                break;
            case GPIO_HIGH:
                SET_BIT(*port_register[_pin_config_t->port], _pin_config_t->pin);
                break;
            default: ret = E_NOT_OK;
 654:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
    return ret; 
}
 656:	08 95       	ret

00000658 <gpio_pin_read_logic>:
    @brief : assigned logic of pin at logic pointer
    @return : return 1 if initialization made successfully or 0.
*/
STD_ReturnType gpio_pin_read_logic(const pin_config_t *_pin_config_t, logic_t *logic){
    STD_ReturnType ret = E_OK;
    if(_pin_config_t == NULL  || logic == NULL || (_pin_config_t->port > MAX_PORT_NUM - 1) || (_pin_config_t->pin > MAX_PIN_NUM - 1)) ret = E_NOT_OK;
 658:	00 97       	sbiw	r24, 0x00	; 0
 65a:	19 f1       	breq	.+70     	; 0x6a2 <gpio_pin_read_logic+0x4a>
 65c:	61 15       	cp	r22, r1
 65e:	71 05       	cpc	r23, r1
 660:	11 f1       	breq	.+68     	; 0x6a6 <gpio_pin_read_logic+0x4e>
 662:	fc 01       	movw	r30, r24
 664:	20 81       	ld	r18, Z
 666:	27 70       	andi	r18, 0x07	; 7
 668:	30 e0       	ldi	r19, 0x00	; 0
 66a:	24 30       	cpi	r18, 0x04	; 4
 66c:	31 05       	cpc	r19, r1
 66e:	ec f4       	brge	.+58     	; 0x6aa <gpio_pin_read_logic+0x52>
 670:	40 81       	ld	r20, Z
 672:	46 95       	lsr	r20
 674:	46 95       	lsr	r20
 676:	46 95       	lsr	r20
 678:	47 70       	andi	r20, 0x07	; 7
    else{
        *logic = READ_BIT(*pin_register[_pin_config_t->port], _pin_config_t->pin);
 67a:	22 0f       	add	r18, r18
 67c:	33 1f       	adc	r19, r19
 67e:	f9 01       	movw	r30, r18
 680:	e0 58       	subi	r30, 0x80	; 128
 682:	ff 4f       	sbci	r31, 0xFF	; 255
 684:	01 90       	ld	r0, Z+
 686:	f0 81       	ld	r31, Z
 688:	e0 2d       	mov	r30, r0
 68a:	80 81       	ld	r24, Z
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	02 c0       	rjmp	.+4      	; 0x694 <gpio_pin_read_logic+0x3c>
 690:	95 95       	asr	r25
 692:	87 95       	ror	r24
 694:	4a 95       	dec	r20
 696:	e2 f7       	brpl	.-8      	; 0x690 <gpio_pin_read_logic+0x38>
 698:	81 70       	andi	r24, 0x01	; 1
 69a:	fb 01       	movw	r30, r22
 69c:	80 83       	st	Z, r24
    @param : _pin_config_t & pointer to assigned logic at it
    @brief : assigned logic of pin at logic pointer
    @return : return 1 if initialization made successfully or 0.
*/
STD_ReturnType gpio_pin_read_logic(const pin_config_t *_pin_config_t, logic_t *logic){
    STD_ReturnType ret = E_OK;
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	08 95       	ret
    if(_pin_config_t == NULL  || logic == NULL || (_pin_config_t->port > MAX_PORT_NUM - 1) || (_pin_config_t->pin > MAX_PIN_NUM - 1)) ret = E_NOT_OK;
 6a2:	80 e0       	ldi	r24, 0x00	; 0
 6a4:	08 95       	ret
 6a6:	80 e0       	ldi	r24, 0x00	; 0
 6a8:	08 95       	ret
 6aa:	80 e0       	ldi	r24, 0x00	; 0
    else{
        *logic = READ_BIT(*pin_register[_pin_config_t->port], _pin_config_t->pin);
    }
    return ret;
}
 6ac:	08 95       	ret

000006ae <gpio_pin_toggle_logic>:
    @brief : toggle logic at pin
    @return : return 1 if initialization made successfully or 0.
*/
STD_ReturnType gpio_pin_toggle_logic(const pin_config_t *_pin_config_t){
    STD_ReturnType ret = E_OK;
    if(_pin_config_t == NULL || (_pin_config_t->port > MAX_PORT_NUM - 1) || (_pin_config_t->pin > MAX_PIN_NUM - 1)) ret = E_NOT_OK;
 6ae:	00 97       	sbiw	r24, 0x00	; 0
 6b0:	01 f1       	breq	.+64     	; 0x6f2 <gpio_pin_toggle_logic+0x44>
 6b2:	fc 01       	movw	r30, r24
 6b4:	20 81       	ld	r18, Z
 6b6:	27 70       	andi	r18, 0x07	; 7
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	24 30       	cpi	r18, 0x04	; 4
 6bc:	31 05       	cpc	r19, r1
 6be:	dc f4       	brge	.+54     	; 0x6f6 <gpio_pin_toggle_logic+0x48>
 6c0:	40 81       	ld	r20, Z
 6c2:	46 95       	lsr	r20
 6c4:	46 95       	lsr	r20
 6c6:	46 95       	lsr	r20
 6c8:	47 70       	andi	r20, 0x07	; 7
    else{
        TOGGLE_BIT(*port_register[_pin_config_t->port], _pin_config_t->pin);
 6ca:	22 0f       	add	r18, r18
 6cc:	33 1f       	adc	r19, r19
 6ce:	f9 01       	movw	r30, r18
 6d0:	e0 59       	subi	r30, 0x90	; 144
 6d2:	ff 4f       	sbci	r31, 0xFF	; 255
 6d4:	01 90       	ld	r0, Z+
 6d6:	f0 81       	ld	r31, Z
 6d8:	e0 2d       	mov	r30, r0
 6da:	20 81       	ld	r18, Z
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <gpio_pin_toggle_logic+0x38>
 6e2:	88 0f       	add	r24, r24
 6e4:	99 1f       	adc	r25, r25
 6e6:	4a 95       	dec	r20
 6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <gpio_pin_toggle_logic+0x34>
 6ea:	82 27       	eor	r24, r18
 6ec:	80 83       	st	Z, r24
    @param : _pin_config_t
    @brief : toggle logic at pin
    @return : return 1 if initialization made successfully or 0.
*/
STD_ReturnType gpio_pin_toggle_logic(const pin_config_t *_pin_config_t){
    STD_ReturnType ret = E_OK;
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	08 95       	ret
    if(_pin_config_t == NULL || (_pin_config_t->port > MAX_PORT_NUM - 1) || (_pin_config_t->pin > MAX_PIN_NUM - 1)) ret = E_NOT_OK;
 6f2:	80 e0       	ldi	r24, 0x00	; 0
 6f4:	08 95       	ret
 6f6:	80 e0       	ldi	r24, 0x00	; 0
    else{
        TOGGLE_BIT(*port_register[_pin_config_t->port], _pin_config_t->pin);
    }
    return ret;  
}
 6f8:	08 95       	ret

000006fa <gpio_port_direction_init>:
    @brief : initialize the direction of port
    @return : return 1 if initialization made successfully or 0.
*/
STD_ReturnType gpio_port_direction_init(const port_index_t port, uint8 direction_init){
    STD_ReturnType ret = E_OK;
    if(port > MAX_PORT_NUM - 1) ret = E_NOT_OK;
 6fa:	84 30       	cpi	r24, 0x04	; 4
 6fc:	60 f4       	brcc	.+24     	; 0x716 <gpio_port_direction_init+0x1c>
    else{
        *ddr_register[port] = direction_init;
 6fe:	e8 2f       	mov	r30, r24
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	ee 0f       	add	r30, r30
 704:	ff 1f       	adc	r31, r31
 706:	e8 58       	subi	r30, 0x88	; 136
 708:	ff 4f       	sbci	r31, 0xFF	; 255
 70a:	01 90       	ld	r0, Z+
 70c:	f0 81       	ld	r31, Z
 70e:	e0 2d       	mov	r30, r0
 710:	60 83       	st	Z, r22
    @param : port & direction_init
    @brief : initialize the direction of port
    @return : return 1 if initialization made successfully or 0.
*/
STD_ReturnType gpio_port_direction_init(const port_index_t port, uint8 direction_init){
    STD_ReturnType ret = E_OK;
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	08 95       	ret
    if(port > MAX_PORT_NUM - 1) ret = E_NOT_OK;
 716:	80 e0       	ldi	r24, 0x00	; 0
    else{
        *ddr_register[port] = direction_init;
    }
    return ret; 
}
 718:	08 95       	ret

0000071a <_exit>:
 71a:	f8 94       	cli

0000071c <__stop_program>:
 71c:	ff cf       	rjmp	.-2      	; 0x71c <__stop_program>
